{"ast":null,"code":"var _jsxFileName = \"/run/media/crynet/DATA/WEB/www/Other/React/test-project/src/components/app/App.js\";\nimport React, { PureComponent } from 'react';\nimport './App.scss'; //\n\nimport json from '../json/json.js';\nimport Filter from '../filter/filter.js';\nimport Filtered from '../filtered/filtered.js';\nimport Search from '../search/search.js';\nexport default class App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: undefined,\n      filters: [],\n      items: []\n    };\n\n    this.filterItems = event => {\n      const checkboxes = [...event.currentTarget.closest(\".filter\").getElementsByTagName(\"input\")];\n      const filters = [];\n      checkboxes.map(checkbox => {\n        if (checkbox.checked) {\n          filters.push(checkbox.name);\n        }\n      });\n      this.setState({\n        filters\n      });\n      let itemss;\n\n      if (this.state.items.length) {\n        itemss = this.state.items;\n      } else {\n        itemss = json;\n      } // К каждому element примеряем filters.every, где в filters будут лежать фильтры\n\n\n      const items = json.filter(element => filters.every(key => element[key]));\n      const result = itemss.filter(word => word.name.toLocaleLowerCase().indexOf(this.state.search.toLocaleLowerCase()) !== -1);\n      this.setState({\n        items\n      });\n    };\n\n    this.searchItems = ({\n      currentTarget\n    }) => {\n      const search = currentTarget.value;\n      let items;\n      this.setState({\n        search\n      }); // console.log( this.state.items );\n\n      if (this.state.items.length) {\n        items = this.state.items;\n      } else {\n        items = json;\n      }\n\n      const result = items.filter(word => word.name.toLocaleLowerCase().indexOf(this.state.search.toLocaleLowerCase()) !== -1);\n      this.setState({\n        items: result\n      });\n    };\n  }\n\n  // filter(nonFiltred) {\n  //   console.log(nonFiltred);\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Filter, {\n      filterItems: this.filterItems,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(Search, {\n      searchItems: this.searchItems,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), this.state.filters.length || this.state.search ? React.createElement(Filtered, {\n      items: this.state.items,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }) // если фильтры есть\n    : React.createElement(Filtered, {\n      items: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }) // если фильтров нет\n    );\n  }\n\n}","map":{"version":3,"sources":["/run/media/crynet/DATA/WEB/www/Other/React/test-project/src/components/app/App.js"],"names":["React","PureComponent","json","Filter","Filtered","Search","App","state","search","undefined","filters","items","filterItems","event","checkboxes","currentTarget","closest","getElementsByTagName","map","checkbox","checked","push","name","setState","itemss","length","filter","element","every","key","result","word","toLocaleLowerCase","indexOf","searchItems","value","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;AACA,OAAO,YAAP,C,CACA;;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,eAAe,MAAMC,GAAN,SAAkBL,aAAlB,CAAgC;AAAA;AAAA;AAAA,SAE7CM,KAF6C,GAErC;AACNC,MAAAA,MAAM,EAAEC,SADF;AAENC,MAAAA,OAAO,EAAE,EAFH;AAGNC,MAAAA,KAAK,EAAE;AAHD,KAFqC;;AAAA,SAQ7CC,WAR6C,GAQ7BC,KAAF,IAAa;AACzB,YAAMC,UAAU,GAAG,CAAC,GAAGD,KAAK,CAACE,aAAN,CAAoBC,OAApB,CAA4B,SAA5B,EAAuCC,oBAAvC,CAA4D,OAA5D,CAAJ,CAAnB;AACA,YAAMP,OAAO,GAAG,EAAhB;AACAI,MAAAA,UAAU,CAACI,GAAX,CAAeC,QAAQ,IAAI;AACzB,YAAIA,QAAQ,CAACC,OAAb,EAAsB;AACpBV,UAAAA,OAAO,CAACW,IAAR,CAAaF,QAAQ,CAACG,IAAtB;AACD;AACF,OAJD;AAKA,WAAKC,QAAL,CAAc;AAAEb,QAAAA;AAAF,OAAd;AAEA,UAAIc,MAAJ;;AAEA,UAAG,KAAKjB,KAAL,CAAWI,KAAX,CAAiBc,MAApB,EAA4B;AAC1BD,QAAAA,MAAM,GAAG,KAAKjB,KAAL,CAAWI,KAApB;AACD,OAFD,MAEO;AACLa,QAAAA,MAAM,GAAGtB,IAAT;AACD,OAhBwB,CAkBzB;;;AACA,YAAMS,KAAK,GAAGT,IAAI,CAACwB,MAAL,CAAYC,OAAO,IAAIjB,OAAO,CAACkB,KAAR,CAAcC,GAAG,IAAIF,OAAO,CAACE,GAAD,CAA5B,CAAvB,CAAd;AAEE,YAAMC,MAAM,GAAGN,MAAM,CAACE,MAAP,CAAcK,IAAI,IAC/BA,IAAI,CAACT,IAAL,CACGU,iBADH,GAEGC,OAFH,CAEW,KAAK1B,KAAL,CAAWC,MAAX,CAAkBwB,iBAAlB,EAFX,MAEsD,CAAC,CAH1C,CAAf;AAOF,WAAKT,QAAL,CAAe;AAACZ,QAAAA;AAAD,OAAf;AACD,KArC4C;;AAAA,SAwC7CuB,WAxC6C,GAwC/B,CAAE;AAACnB,MAAAA;AAAD,KAAF,KAAuB;AACnC,YAAMP,MAAM,GAAGO,aAAa,CAACoB,KAA7B;AACA,UAAIxB,KAAJ;AAEA,WAAKY,QAAL,CAAc;AAAEf,QAAAA;AAAF,OAAd,EAJmC,CAMnC;;AAEA,UAAG,KAAKD,KAAL,CAAWI,KAAX,CAAiBc,MAApB,EAA4B;AAC1Bd,QAAAA,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAnB;AACD,OAFD,MAEO;AACLA,QAAAA,KAAK,GAAGT,IAAR;AACD;;AAGH,YAAM4B,MAAM,GAAGnB,KAAK,CAACe,MAAN,CAAaK,IAAI,IAC9BA,IAAI,CAACT,IAAL,CACGU,iBADH,GAEGC,OAFH,CAEW,KAAK1B,KAAL,CAAWC,MAAX,CAAkBwB,iBAAlB,EAFX,MAEsD,CAAC,CAH1C,CAAf;AAMA,WAAKT,QAAL,CAAe;AAACZ,QAAAA,KAAK,EAAGmB;AAAT,OAAf;AACC,KA9D4C;AAAA;;AAiE7C;AACA;AACA;AAEAM,EAAAA,MAAM,GAAG;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,KAAKxB,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,KAAKsB,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAMI,KAAK3B,KAAL,CAAWG,OAAX,CAAmBe,MAAnB,IAA6B,KAAKlB,KAAL,CAAWC,MAAxC,GACI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWI,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAC0C;AAD1C,MAEI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARR,CAQmC;AARnC,KADF;AAaD;;AApF4C","sourcesContent":["import React, {PureComponent} from 'react'\nimport './App.scss';\n//\nimport json from '../json/json.js'\nimport Filter from '../filter/filter.js'\nimport Filtered from '../filtered/filtered.js'\nimport Search from '../search/search.js';\n\nexport default class App extends PureComponent {\n  // задаём стейт\n  state = {\n    search: undefined,\n    filters: [],\n    items: [],\n  };\n  // проверяем какие фильтры выбрал юзер, а потом добавляем это в стейт\n  filterItems = ( event ) => {\n    const checkboxes = [...event.currentTarget.closest(\".filter\").getElementsByTagName(\"input\")]\n    const filters = [];\n    checkboxes.map(checkbox => {\n      if (checkbox.checked) {\n        filters.push(checkbox.name);\n      }\n    });\n    this.setState({ filters });\n\n    let itemss\n\n    if(this.state.items.length) {\n      itemss = this.state.items\n    } else {\n      itemss = json\n    }\n\n    // К каждому element примеряем filters.every, где в filters будут лежать фильтры\n    const items = json.filter(element => filters.every(key => element[key]));\n\n      const result = itemss.filter(word =>\n        word.name\n          .toLocaleLowerCase()\n          .indexOf(this.state.search.toLocaleLowerCase()) !== -1\n      )\n\n\n    this.setState( {items} )\n  }\n\n  // поиск по айтемам\n  searchItems = ( {currentTarget} ) => {\n    const search = currentTarget.value\n    let items\n\n    this.setState({ search })\n\n    // console.log( this.state.items );\n\n    if(this.state.items.length) {\n      items = this.state.items\n    } else {\n      items = json\n    }\n\n\n  const result = items.filter(word =>\n    word.name\n      .toLocaleLowerCase()\n      .indexOf(this.state.search.toLocaleLowerCase()) !== -1\n  )\n\n  this.setState( {items : result} )\n  }\n\n\n  // filter(nonFiltred) {\n  //   console.log(nonFiltred);\n  // }\n\n  render() {\n\n    return (\n      <div>\n        <div className=\"navigation\">\n          <Filter filterItems={this.filterItems} />\n          <Search searchItems={this.searchItems} />\n        </div>\n        {\n          this.state.filters.length || this.state.search\n            ? <Filtered items={this.state.items} /> // если фильтры есть\n            : <Filtered items={false} /> // если фильтров нет\n        }\n      </div>\n    )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}