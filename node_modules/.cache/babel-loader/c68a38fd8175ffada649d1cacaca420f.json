{"ast":null,"code":"var _jsxFileName = \"/run/media/crynet/DATA/WEB/www/Other/React/test-project/src/components/app/App.js\";\nimport React, { PureComponent } from 'react';\nimport './App.scss'; //\n\nimport json from '../json/json.js';\nimport Filter from '../filter/filter.js';\nimport Filtered from '../filtered/filtered.js';\nimport Search from '../search/search.js';\nexport default class App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: undefined,\n      filters: [],\n      items: []\n    };\n\n    this.filterItems = event => {\n      const checkboxes = [...event.currentTarget.closest(\".filter\").getElementsByTagName(\"input\")];\n      const filters = [];\n      checkboxes.map(checkbox => {\n        if (checkbox.checked) {\n          filters.push(checkbox.name);\n        }\n      });\n      this.setState({\n        filters\n      }); // К каждому element примеряем filters.every, где в filters будут лежать фильтры\n\n      const items = json.filter(element => filters.every(key => element[key]));\n      this.setState({\n        items\n      });\n    };\n\n    this.onSearchChange = ({\n      currentTarget\n    }) => {\n      const search = currentTarget.value;\n      this.setState({\n        search\n      }, this.ftest);\n    };\n  }\n\n  async ftest() {\n    const el = await this.selectedItems();\n    await this.searchFiltred(el);\n  }\n\n  searchFiltred(el) {\n    console.log(el);\n    const items = json.filter(word => word.name // .toLocaleLowerCase()\n    .indexOf(this.state.search) !== -1);\n    this.setState({\n      items\n    });\n  }\n\n  selectedItems() {\n    if (this.state.items.length) {\n      return \"item\";\n    } else {\n      return \"json\";\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Filter, {\n      filterItems: this.filterItems,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Search, {\n      onSearchChange: this.onSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), this.state.items.length ? React.createElement(Filtered, {\n      items: this.state.items,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }) // если фильтры есть\n    : React.createElement(Filtered, {\n      items: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) // если фильтров нет\n    );\n  }\n\n}","map":{"version":3,"sources":["/run/media/crynet/DATA/WEB/www/Other/React/test-project/src/components/app/App.js"],"names":["React","PureComponent","json","Filter","Filtered","Search","App","state","search","undefined","filters","items","filterItems","event","checkboxes","currentTarget","closest","getElementsByTagName","map","checkbox","checked","push","name","setState","filter","element","every","key","onSearchChange","value","ftest","el","selectedItems","searchFiltred","console","log","word","indexOf","length","render"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react'\nimport './App.scss';\n//\nimport json from '../json/json.js'\nimport Filter from '../filter/filter.js'\nimport Filtered from '../filtered/filtered.js'\nimport Search from '../search/search.js';\n\nexport default class App extends PureComponent {\n  // задаём стейт\n  state = {\n    search: undefined,\n    filters: [],\n    items: [],\n  };\n  // проверяем какие фильтры выбрал юзер, а потом добавляем это в стейт\n  filterItems = ( event ) => {\n    const checkboxes = [...event.currentTarget.closest(\".filter\").getElementsByTagName(\"input\")]\n    const filters = [];\n    checkboxes.map(checkbox => {\n      if (checkbox.checked) {\n        filters.push(checkbox.name);\n      }\n    });\n    this.setState({ filters });\n\n    // К каждому element примеряем filters.every, где в filters будут лежать фильтры\n    const items = json.filter(element => filters.every(key => element[key]));\n\n    this.setState( {items} )\n  }\n\n  // поиск по айтемам\n  onSearchChange = ( {currentTarget} ) => {\n    const search = currentTarget.value\n    this.setState({ search }, this.ftest)\n  }\n\n  async ftest() {\n    const el = await this.selectedItems()\n    await this.searchFiltred(el)\n  }\n\n  searchFiltred(el) {\n    console.log(el);\n    const items = json.filter(word =>\n        word.name\n        // .toLocaleLowerCase()\n        .indexOf(this.state.search) !== -1\n    )\n\n    this.setState( {items} )\n  }\n\n  selectedItems() {\n    if(this.state.items.length) {\n      return \"item\"\n    } else {\n      return \"json\"\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"navigation\">\n          <Filter filterItems={this.filterItems} />\n          <Search onSearchChange={this.onSearchChange} />\n        </div>\n        {\n          this.state.items.length\n            ? <Filtered items={this.state.items} /> // если фильтры есть\n            : <Filtered items={false} /> // если фильтров нет\n        }\n      </div>\n    )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}